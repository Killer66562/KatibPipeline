# PIPELINE DEFINITION
# Name: katib-pipeline
# Inputs:
#    client_namespace: str [Default: 'kubeflow-user-example-com']
#    cpu_per_trial: int [Default: 1.0]
#    experiment_name: str
#    experiment_namespace: str [Default: 'kubeflow-user-example-com']
#    learning_rate_max: float [Default: 0.2]
#    learning_rate_min: float [Default: 0.01]
#    max_failed_trial_counts: int [Default: 3.0]
#    max_trial_counts: int [Default: 6.0]
#    n_estimators_max: int [Default: 2000.0]
#    n_estimators_min: int [Default: 1000.0]
#    parallel_trial_counts: int [Default: 1.0]
components:
  comp-create-katib-experiment-task:
    executorLabel: exec-create-katib-experiment-task
    inputDefinitions:
      artifacts:
        x_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        x_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        client_namespace:
          parameterType: STRING
        cpu_per_trial:
          parameterType: NUMBER_INTEGER
        experiment_name:
          parameterType: STRING
        experiment_namespace:
          parameterType: STRING
        learning_rate_max:
          parameterType: NUMBER_DOUBLE
        learning_rate_min:
          parameterType: NUMBER_DOUBLE
        max_failed_trial_counts:
          parameterType: NUMBER_INTEGER
        max_trial_counts:
          parameterType: NUMBER_INTEGER
        n_estimators_max:
          parameterType: NUMBER_INTEGER
        n_estimators_min:
          parameterType: NUMBER_INTEGER
        parallel_trial_counts:
          parameterType: NUMBER_INTEGER
  comp-load-data:
    executorLabel: exec-load-data
    outputDefinitions:
      artifacts:
        data_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-prepare-data:
    executorLabel: exec-prepare-data
    inputDefinitions:
      artifacts:
        data_input:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        x_test_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        x_train_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_test_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_train_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-create-katib-experiment-task:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - create_katib_experiment_task
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'kubeflow-katib'\
          \ 'pandas' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef create_katib_experiment_task(\n    experiment_name: str, \n \
          \   x_train: Input[Dataset], \n    y_train: Input[Dataset], \n    x_test:\
          \ Input[Dataset],\n    y_test: Input[Dataset],\n    experiment_namespace:\
          \ str, \n    client_namespace: str, \n    max_trial_counts: int, \n    max_failed_trial_counts:\
          \ int, \n    parallel_trial_counts: int,\n    n_estimators_min: int,\n \
          \   n_estimators_max: int,\n    learning_rate_min: float, \n    learning_rate_max:\
          \ float, \n    cpu_per_trial: int\n):\n    import kubeflow.katib as katib\n\
          \n    def objective(parameters):\n        import pandas as pd\n\n      \
          \  from xgboost import XGBClassifier\n        from sklearn.metrics import\
          \ accuracy_score\n\n        x_train_df = pd.read_csv(parameters['x_train_uri'])\n\
          \        y_train_df = pd.read_csv(parameters['y_train_uri'])\n\n       \
          \ x_test_df = pd.read_csv(parameters['x_test_uri'])\n        y_test_df =\
          \ pd.read_csv(parameters['y_test_uri'])\n\n        model = XGBClassifier(n_estimators=parameters['n_estimators'],\
          \ learning_rate=parameters['learning_rate'])\n        model.fit(x_train_df,\
          \ y_train_df.values.ravel())\n\n        y_pred = model.predict(x_test_df)\n\
          \        accuracy = accuracy_score(y_test_df, y_pred)\n\n        print(f\"\
          accuracy={accuracy}\")\n\n    parameters = {\n        'n_estimators': katib.search.int(min=n_estimators_min,\
          \ max=n_estimators_max, step=1), \n        'learning_rate': katib.search.double(min=learning_rate_min,\
          \ max=learning_rate_max, step=0.001), \n        'x_train_uri': katib.search.categorical(list=[x_train.uri]),\
          \ \n        'y_train_uri': katib.search.categorical(list=[y_train.uri]),\
          \ \n        'x_test_uri': katib.search.categorical(list=[x_test.uri]), \n\
          \        'y_test_uri': katib.search.categorical(list=[y_test.uri])\n   \
          \ }\n\n    client = katib.KatibClient(namespace=client_namespace)\n    client.tune(\n\
          \        name=experiment_name, \n        namespace=experiment_namespace,\
          \ \n        objective=objective, \n        parameters=parameters, \n   \
          \     objective_metric_name='accuracy', \n        objective_type='maximize',\
          \ \n        objective_goal=0.99, \n        max_trial_count=max_trial_counts,\
          \ \n        max_failed_trial_count=max_failed_trial_counts, \n        parallel_trial_count=parallel_trial_counts,\
          \ \n        packages_to_install=[\n            'pandas', \n            'scikit-learn',\
          \ \n            'xgboost', \n            'joblib'\n        ],\n        retain_trials=True,\
          \ \n        resources_per_trial={\"cpu\": cpu_per_trial}\n    )\n    client.wait_for_experiment_condition(name=experiment_name)\n\
          \    print(client.get_optimal_hyperparameters(experiment_name))\n\n"
        image: python:3.11-slim
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data(data_output: Output[Dataset]):\n    import pandas as\
          \ pd\n\n    url = \"https://raw.githubusercontent.com/daniel88516/diabetes-data/main/10k.csv\"\
          \n    df_data = pd.read_csv(url)\n\n    df_data = df_data.drop(df_data[df_data['diabetes']\
          \ == 'No Info'].index)\n    df_data = df_data[['gender','age', 'bmi', 'HbA1c_level',\
          \ 'blood_glucose_level', 'diabetes']]\n    df_data = df_data.dropna(thresh=4)\n\
          \n    gender_map = {'Male': 0 , 'Female': 1  , 'Other': 2}\n    df_data['gender']\
          \ = df_data['gender'].map(gender_map)\n    df_data = df_data[df_data['gender']\
          \ != 2]\n    df_data['age'] = df_data['age'].replace('No Info', df_data['age'].mean())\n\
          \    df_data['bmi'] = df_data['bmi'].replace('No Info', df_data['bmi'].mean())\n\
          \    df_data['HbA1c_level'] = df_data['HbA1c_level'].replace('No Info',\
          \ df_data['HbA1c_level'].mean())\n    df_data['blood_glucose_level'] = df_data['blood_glucose_level'].replace('No\
          \ Info', df_data['blood_glucose_level'].mean())\n\n    df_data.to_csv(data_output.path)\n\
          \n"
        image: python:3.9
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data(\n    data_input: Input[Dataset], \n    x_train_output:\
          \ Output[Dataset], x_test_output: Output[Dataset],\n    y_train_output:\
          \ Output[Dataset], y_test_output: Output[Dataset]\n):\n    import pandas\
          \ as pd\n    from sklearn.model_selection import train_test_split\n\n  \
          \  df_data = pd.read_csv(data_input.path)\n\n    x = df_data.drop(labels=['diabetes'],\
          \ axis=1)\n    y = df_data[['diabetes']]\n\n    x_train, x_test, y_train,\
          \ y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n  \
          \  x_train_df = pd.DataFrame(x_train)\n    x_test_df = pd.DataFrame(x_test)\n\
          \    y_train_df = pd.DataFrame(y_train)\n    y_test_df = pd.DataFrame(y_test)\n\
          \n    x_train_df.to_csv(x_train_output.path, index=False)\n    x_test_df.to_csv(x_test_output.path,\
          \ index=False)\n    y_train_df.to_csv(y_train_output.path, index=False)\n\
          \    y_test_df.to_csv(y_test_output.path, index=False)\n\n"
        image: python:3.9
pipelineInfo:
  name: katib-pipeline
root:
  dag:
    tasks:
      create-katib-experiment-task:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-create-katib-experiment-task
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            x_test:
              taskOutputArtifact:
                outputArtifactKey: x_test_output
                producerTask: prepare-data
            x_train:
              taskOutputArtifact:
                outputArtifactKey: x_train_output
                producerTask: prepare-data
            y_test:
              taskOutputArtifact:
                outputArtifactKey: y_test_output
                producerTask: prepare-data
            y_train:
              taskOutputArtifact:
                outputArtifactKey: y_train_output
                producerTask: prepare-data
          parameters:
            client_namespace:
              componentInputParameter: client_namespace
            cpu_per_trial:
              componentInputParameter: cpu_per_trial
            experiment_name:
              componentInputParameter: experiment_name
            experiment_namespace:
              componentInputParameter: experiment_namespace
            learning_rate_max:
              componentInputParameter: learning_rate_max
            learning_rate_min:
              componentInputParameter: learning_rate_min
            max_failed_trial_counts:
              componentInputParameter: max_failed_trial_counts
            max_trial_counts:
              componentInputParameter: max_trial_counts
            n_estimators_max:
              componentInputParameter: n_estimators_max
            n_estimators_min:
              componentInputParameter: n_estimators_min
            parallel_trial_counts:
              componentInputParameter: parallel_trial_counts
        taskInfo:
          name: create-katib-experiment-task
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        taskInfo:
          name: load-data
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        dependentTasks:
        - load-data
        inputs:
          artifacts:
            data_input:
              taskOutputArtifact:
                outputArtifactKey: data_output
                producerTask: load-data
        taskInfo:
          name: prepare-data
  inputDefinitions:
    parameters:
      client_namespace:
        defaultValue: kubeflow-user-example-com
        isOptional: true
        parameterType: STRING
      cpu_per_trial:
        defaultValue: 1.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      experiment_name:
        parameterType: STRING
      experiment_namespace:
        defaultValue: kubeflow-user-example-com
        isOptional: true
        parameterType: STRING
      learning_rate_max:
        defaultValue: 0.2
        isOptional: true
        parameterType: NUMBER_DOUBLE
      learning_rate_min:
        defaultValue: 0.01
        isOptional: true
        parameterType: NUMBER_DOUBLE
      max_failed_trial_counts:
        defaultValue: 3.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      max_trial_counts:
        defaultValue: 6.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      n_estimators_max:
        defaultValue: 2000.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      n_estimators_min:
        defaultValue: 1000.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      parallel_trial_counts:
        defaultValue: 1.0
        isOptional: true
        parameterType: NUMBER_INTEGER
schemaVersion: 2.1.0
sdkVersion: kfp-2.9.0

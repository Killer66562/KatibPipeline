// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/katib/pkg/controller.v1beta1/experiment/manifest (interfaces: Generator)
//
// Generated by this command:
//
//	mockgen -package mock -destination pkg/mock/v1beta1/experiment/manifest/generator.go github.com/kubeflow/katib/pkg/controller.v1beta1/experiment/manifest Generator
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v1beta1 "github.com/kubeflow/katib/pkg/apis/config/v1beta1"
	v1beta10 "github.com/kubeflow/katib/pkg/apis/controller/common/v1beta1"
	v1beta11 "github.com/kubeflow/katib/pkg/apis/controller/experiments/v1beta1"
	gomock "go.uber.org/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// GetEarlyStoppingConfigData mocks base method.
func (m *MockGenerator) GetEarlyStoppingConfigData(arg0 string) (v1beta1.EarlyStoppingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarlyStoppingConfigData", arg0)
	ret0, _ := ret[0].(v1beta1.EarlyStoppingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarlyStoppingConfigData indicates an expected call of GetEarlyStoppingConfigData.
func (mr *MockGeneratorMockRecorder) GetEarlyStoppingConfigData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarlyStoppingConfigData", reflect.TypeOf((*MockGenerator)(nil).GetEarlyStoppingConfigData), arg0)
}

// GetMetricsCollectorConfigData mocks base method.
func (m *MockGenerator) GetMetricsCollectorConfigData(arg0 v1beta10.CollectorKind) (v1beta1.MetricsCollectorConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsCollectorConfigData", arg0)
	ret0, _ := ret[0].(v1beta1.MetricsCollectorConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsCollectorConfigData indicates an expected call of GetMetricsCollectorConfigData.
func (mr *MockGeneratorMockRecorder) GetMetricsCollectorConfigData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsCollectorConfigData", reflect.TypeOf((*MockGenerator)(nil).GetMetricsCollectorConfigData), arg0)
}

// GetRunSpecWithHyperParameters mocks base method.
func (m *MockGenerator) GetRunSpecWithHyperParameters(arg0 *v1beta11.Experiment, arg1, arg2 string, arg3 []v1beta10.ParameterAssignment) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunSpecWithHyperParameters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunSpecWithHyperParameters indicates an expected call of GetRunSpecWithHyperParameters.
func (mr *MockGeneratorMockRecorder) GetRunSpecWithHyperParameters(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunSpecWithHyperParameters", reflect.TypeOf((*MockGenerator)(nil).GetRunSpecWithHyperParameters), arg0, arg1, arg2, arg3)
}

// GetSuggestionConfigData mocks base method.
func (m *MockGenerator) GetSuggestionConfigData(arg0 string) (v1beta1.SuggestionConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestionConfigData", arg0)
	ret0, _ := ret[0].(v1beta1.SuggestionConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestionConfigData indicates an expected call of GetSuggestionConfigData.
func (mr *MockGeneratorMockRecorder) GetSuggestionConfigData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestionConfigData", reflect.TypeOf((*MockGenerator)(nil).GetSuggestionConfigData), arg0)
}

// GetTrialTemplate mocks base method.
func (m *MockGenerator) GetTrialTemplate(arg0 *v1beta11.Experiment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrialTemplate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialTemplate indicates an expected call of GetTrialTemplate.
func (mr *MockGeneratorMockRecorder) GetTrialTemplate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialTemplate", reflect.TypeOf((*MockGenerator)(nil).GetTrialTemplate), arg0)
}

// InjectClient mocks base method.
func (m *MockGenerator) InjectClient(arg0 client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InjectClient", arg0)
}

// InjectClient indicates an expected call of InjectClient.
func (mr *MockGeneratorMockRecorder) InjectClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectClient", reflect.TypeOf((*MockGenerator)(nil).InjectClient), arg0)
}

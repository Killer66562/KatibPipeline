// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/katib/pkg/apis/manager/v1beta1 (interfaces: SuggestionClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination pkg/mock/v1beta1/api/suggestion.go github.com/kubeflow/katib/pkg/apis/manager/v1beta1 SuggestionClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api_v1_beta1 "github.com/kubeflow/katib/pkg/apis/manager/v1beta1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSuggestionClient is a mock of SuggestionClient interface.
type MockSuggestionClient struct {
	ctrl     *gomock.Controller
	recorder *MockSuggestionClientMockRecorder
}

// MockSuggestionClientMockRecorder is the mock recorder for MockSuggestionClient.
type MockSuggestionClientMockRecorder struct {
	mock *MockSuggestionClient
}

// NewMockSuggestionClient creates a new mock instance.
func NewMockSuggestionClient(ctrl *gomock.Controller) *MockSuggestionClient {
	mock := &MockSuggestionClient{ctrl: ctrl}
	mock.recorder = &MockSuggestionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuggestionClient) EXPECT() *MockSuggestionClientMockRecorder {
	return m.recorder
}

// GetSuggestions mocks base method.
func (m *MockSuggestionClient) GetSuggestions(arg0 context.Context, arg1 *api_v1_beta1.GetSuggestionsRequest, arg2 ...grpc.CallOption) (*api_v1_beta1.GetSuggestionsReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuggestions", varargs...)
	ret0, _ := ret[0].(*api_v1_beta1.GetSuggestionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions.
func (mr *MockSuggestionClientMockRecorder) GetSuggestions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockSuggestionClient)(nil).GetSuggestions), varargs...)
}

// ValidateAlgorithmSettings mocks base method.
func (m *MockSuggestionClient) ValidateAlgorithmSettings(arg0 context.Context, arg1 *api_v1_beta1.ValidateAlgorithmSettingsRequest, arg2 ...grpc.CallOption) (*api_v1_beta1.ValidateAlgorithmSettingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateAlgorithmSettings", varargs...)
	ret0, _ := ret[0].(*api_v1_beta1.ValidateAlgorithmSettingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAlgorithmSettings indicates an expected call of ValidateAlgorithmSettings.
func (mr *MockSuggestionClientMockRecorder) ValidateAlgorithmSettings(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAlgorithmSettings", reflect.TypeOf((*MockSuggestionClient)(nil).ValidateAlgorithmSettings), varargs...)
}
